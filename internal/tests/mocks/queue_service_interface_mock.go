// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	services "tech-challenge-hackaton/internal/application/services"

	mock "github.com/stretchr/testify/mock"
)

// QueueServiceInterfaceMock is an autogenerated mock type for the QueueServiceInterface type
type QueueServiceInterfaceMock struct {
	mock.Mock
}

type QueueServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *QueueServiceInterfaceMock) EXPECT() *QueueServiceInterfaceMock_Expecter {
	return &QueueServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// AckVideoProcessedMessage provides a mock function with given fields: messageID
func (_m *QueueServiceInterfaceMock) AckVideoProcessedMessage(messageID string) error {
	ret := _m.Called(messageID)

	if len(ret) == 0 {
		panic("no return value specified for AckVideoProcessedMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(messageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueueServiceInterfaceMock_AckVideoProcessedMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AckVideoProcessedMessage'
type QueueServiceInterfaceMock_AckVideoProcessedMessage_Call struct {
	*mock.Call
}

// AckVideoProcessedMessage is a helper method to define mock.On call
//   - messageID string
func (_e *QueueServiceInterfaceMock_Expecter) AckVideoProcessedMessage(messageID interface{}) *QueueServiceInterfaceMock_AckVideoProcessedMessage_Call {
	return &QueueServiceInterfaceMock_AckVideoProcessedMessage_Call{Call: _e.mock.On("AckVideoProcessedMessage", messageID)}
}

func (_c *QueueServiceInterfaceMock_AckVideoProcessedMessage_Call) Run(run func(messageID string)) *QueueServiceInterfaceMock_AckVideoProcessedMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *QueueServiceInterfaceMock_AckVideoProcessedMessage_Call) Return(_a0 error) *QueueServiceInterfaceMock_AckVideoProcessedMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueueServiceInterfaceMock_AckVideoProcessedMessage_Call) RunAndReturn(run func(string) error) *QueueServiceInterfaceMock_AckVideoProcessedMessage_Call {
	_c.Call.Return(run)
	return _c
}

// AckVideoUploadedMessage provides a mock function with given fields: messageID
func (_m *QueueServiceInterfaceMock) AckVideoUploadedMessage(messageID string) error {
	ret := _m.Called(messageID)

	if len(ret) == 0 {
		panic("no return value specified for AckVideoUploadedMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(messageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueueServiceInterfaceMock_AckVideoUploadedMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AckVideoUploadedMessage'
type QueueServiceInterfaceMock_AckVideoUploadedMessage_Call struct {
	*mock.Call
}

// AckVideoUploadedMessage is a helper method to define mock.On call
//   - messageID string
func (_e *QueueServiceInterfaceMock_Expecter) AckVideoUploadedMessage(messageID interface{}) *QueueServiceInterfaceMock_AckVideoUploadedMessage_Call {
	return &QueueServiceInterfaceMock_AckVideoUploadedMessage_Call{Call: _e.mock.On("AckVideoUploadedMessage", messageID)}
}

func (_c *QueueServiceInterfaceMock_AckVideoUploadedMessage_Call) Run(run func(messageID string)) *QueueServiceInterfaceMock_AckVideoUploadedMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *QueueServiceInterfaceMock_AckVideoUploadedMessage_Call) Return(_a0 error) *QueueServiceInterfaceMock_AckVideoUploadedMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueueServiceInterfaceMock_AckVideoUploadedMessage_Call) RunAndReturn(run func(string) error) *QueueServiceInterfaceMock_AckVideoUploadedMessage_Call {
	_c.Call.Return(run)
	return _c
}

// ReceiveVideoProcessedMessage provides a mock function with no fields
func (_m *QueueServiceInterfaceMock) ReceiveVideoProcessedMessage() ([]services.VideoProcessedMessage, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReceiveVideoProcessedMessage")
	}

	var r0 []services.VideoProcessedMessage
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]services.VideoProcessedMessage, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []services.VideoProcessedMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]services.VideoProcessedMessage)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueueServiceInterfaceMock_ReceiveVideoProcessedMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReceiveVideoProcessedMessage'
type QueueServiceInterfaceMock_ReceiveVideoProcessedMessage_Call struct {
	*mock.Call
}

// ReceiveVideoProcessedMessage is a helper method to define mock.On call
func (_e *QueueServiceInterfaceMock_Expecter) ReceiveVideoProcessedMessage() *QueueServiceInterfaceMock_ReceiveVideoProcessedMessage_Call {
	return &QueueServiceInterfaceMock_ReceiveVideoProcessedMessage_Call{Call: _e.mock.On("ReceiveVideoProcessedMessage")}
}

func (_c *QueueServiceInterfaceMock_ReceiveVideoProcessedMessage_Call) Run(run func()) *QueueServiceInterfaceMock_ReceiveVideoProcessedMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QueueServiceInterfaceMock_ReceiveVideoProcessedMessage_Call) Return(_a0 []services.VideoProcessedMessage, _a1 error) *QueueServiceInterfaceMock_ReceiveVideoProcessedMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueueServiceInterfaceMock_ReceiveVideoProcessedMessage_Call) RunAndReturn(run func() ([]services.VideoProcessedMessage, error)) *QueueServiceInterfaceMock_ReceiveVideoProcessedMessage_Call {
	_c.Call.Return(run)
	return _c
}

// ReceiveVideoUploadedMessage provides a mock function with no fields
func (_m *QueueServiceInterfaceMock) ReceiveVideoUploadedMessage() ([]services.VideoUploadedMessage, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReceiveVideoUploadedMessage")
	}

	var r0 []services.VideoUploadedMessage
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]services.VideoUploadedMessage, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []services.VideoUploadedMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]services.VideoUploadedMessage)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueueServiceInterfaceMock_ReceiveVideoUploadedMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReceiveVideoUploadedMessage'
type QueueServiceInterfaceMock_ReceiveVideoUploadedMessage_Call struct {
	*mock.Call
}

// ReceiveVideoUploadedMessage is a helper method to define mock.On call
func (_e *QueueServiceInterfaceMock_Expecter) ReceiveVideoUploadedMessage() *QueueServiceInterfaceMock_ReceiveVideoUploadedMessage_Call {
	return &QueueServiceInterfaceMock_ReceiveVideoUploadedMessage_Call{Call: _e.mock.On("ReceiveVideoUploadedMessage")}
}

func (_c *QueueServiceInterfaceMock_ReceiveVideoUploadedMessage_Call) Run(run func()) *QueueServiceInterfaceMock_ReceiveVideoUploadedMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QueueServiceInterfaceMock_ReceiveVideoUploadedMessage_Call) Return(_a0 []services.VideoUploadedMessage, _a1 error) *QueueServiceInterfaceMock_ReceiveVideoUploadedMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueueServiceInterfaceMock_ReceiveVideoUploadedMessage_Call) RunAndReturn(run func() ([]services.VideoUploadedMessage, error)) *QueueServiceInterfaceMock_ReceiveVideoUploadedMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SendVideoProcessedMessage provides a mock function with given fields: msg
func (_m *QueueServiceInterfaceMock) SendVideoProcessedMessage(msg services.VideoProcessedMessage) error {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for SendVideoProcessedMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(services.VideoProcessedMessage) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueueServiceInterfaceMock_SendVideoProcessedMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendVideoProcessedMessage'
type QueueServiceInterfaceMock_SendVideoProcessedMessage_Call struct {
	*mock.Call
}

// SendVideoProcessedMessage is a helper method to define mock.On call
//   - msg services.VideoProcessedMessage
func (_e *QueueServiceInterfaceMock_Expecter) SendVideoProcessedMessage(msg interface{}) *QueueServiceInterfaceMock_SendVideoProcessedMessage_Call {
	return &QueueServiceInterfaceMock_SendVideoProcessedMessage_Call{Call: _e.mock.On("SendVideoProcessedMessage", msg)}
}

func (_c *QueueServiceInterfaceMock_SendVideoProcessedMessage_Call) Run(run func(msg services.VideoProcessedMessage)) *QueueServiceInterfaceMock_SendVideoProcessedMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.VideoProcessedMessage))
	})
	return _c
}

func (_c *QueueServiceInterfaceMock_SendVideoProcessedMessage_Call) Return(_a0 error) *QueueServiceInterfaceMock_SendVideoProcessedMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueueServiceInterfaceMock_SendVideoProcessedMessage_Call) RunAndReturn(run func(services.VideoProcessedMessage) error) *QueueServiceInterfaceMock_SendVideoProcessedMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SendVideoUploadedMessage provides a mock function with given fields: msg
func (_m *QueueServiceInterfaceMock) SendVideoUploadedMessage(msg services.VideoUploadedMessage) error {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for SendVideoUploadedMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(services.VideoUploadedMessage) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueueServiceInterfaceMock_SendVideoUploadedMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendVideoUploadedMessage'
type QueueServiceInterfaceMock_SendVideoUploadedMessage_Call struct {
	*mock.Call
}

// SendVideoUploadedMessage is a helper method to define mock.On call
//   - msg services.VideoUploadedMessage
func (_e *QueueServiceInterfaceMock_Expecter) SendVideoUploadedMessage(msg interface{}) *QueueServiceInterfaceMock_SendVideoUploadedMessage_Call {
	return &QueueServiceInterfaceMock_SendVideoUploadedMessage_Call{Call: _e.mock.On("SendVideoUploadedMessage", msg)}
}

func (_c *QueueServiceInterfaceMock_SendVideoUploadedMessage_Call) Run(run func(msg services.VideoUploadedMessage)) *QueueServiceInterfaceMock_SendVideoUploadedMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.VideoUploadedMessage))
	})
	return _c
}

func (_c *QueueServiceInterfaceMock_SendVideoUploadedMessage_Call) Return(_a0 error) *QueueServiceInterfaceMock_SendVideoUploadedMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueueServiceInterfaceMock_SendVideoUploadedMessage_Call) RunAndReturn(run func(services.VideoUploadedMessage) error) *QueueServiceInterfaceMock_SendVideoUploadedMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueueServiceInterfaceMock creates a new instance of QueueServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueueServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueueServiceInterfaceMock {
	mock := &QueueServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
