// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	entities "tech-challenge-hackaton/internal/application/entities"

	mock "github.com/stretchr/testify/mock"
)

// VideoRepositoryInterfaceMock is an autogenerated mock type for the VideoRepositoryInterface type
type VideoRepositoryInterfaceMock struct {
	mock.Mock
}

type VideoRepositoryInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *VideoRepositoryInterfaceMock) EXPECT() *VideoRepositoryInterfaceMock_Expecter {
	return &VideoRepositoryInterfaceMock_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: videoID
func (_m *VideoRepositoryInterfaceMock) Get(videoID string) (*entities.Video, error) {
	ret := _m.Called(videoID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entities.Video
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Video, error)); ok {
		return rf(videoID)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Video); ok {
		r0 = rf(videoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Video)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(videoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VideoRepositoryInterfaceMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type VideoRepositoryInterfaceMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - videoID string
func (_e *VideoRepositoryInterfaceMock_Expecter) Get(videoID interface{}) *VideoRepositoryInterfaceMock_Get_Call {
	return &VideoRepositoryInterfaceMock_Get_Call{Call: _e.mock.On("Get", videoID)}
}

func (_c *VideoRepositoryInterfaceMock_Get_Call) Run(run func(videoID string)) *VideoRepositoryInterfaceMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *VideoRepositoryInterfaceMock_Get_Call) Return(_a0 *entities.Video, _a1 error) *VideoRepositoryInterfaceMock_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VideoRepositoryInterfaceMock_Get_Call) RunAndReturn(run func(string) (*entities.Video, error)) *VideoRepositoryInterfaceMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: video
func (_m *VideoRepositoryInterfaceMock) Insert(video *entities.Video) error {
	ret := _m.Called(video)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Video) error); ok {
		r0 = rf(video)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VideoRepositoryInterfaceMock_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type VideoRepositoryInterfaceMock_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - video *entities.Video
func (_e *VideoRepositoryInterfaceMock_Expecter) Insert(video interface{}) *VideoRepositoryInterfaceMock_Insert_Call {
	return &VideoRepositoryInterfaceMock_Insert_Call{Call: _e.mock.On("Insert", video)}
}

func (_c *VideoRepositoryInterfaceMock_Insert_Call) Run(run func(video *entities.Video)) *VideoRepositoryInterfaceMock_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Video))
	})
	return _c
}

func (_c *VideoRepositoryInterfaceMock_Insert_Call) Return(_a0 error) *VideoRepositoryInterfaceMock_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VideoRepositoryInterfaceMock_Insert_Call) RunAndReturn(run func(*entities.Video) error) *VideoRepositoryInterfaceMock_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// ListByUserID provides a mock function with given fields: userID
func (_m *VideoRepositoryInterfaceMock) ListByUserID(userID string) ([]*entities.Video, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for ListByUserID")
	}

	var r0 []*entities.Video
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*entities.Video, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []*entities.Video); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Video)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VideoRepositoryInterfaceMock_ListByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUserID'
type VideoRepositoryInterfaceMock_ListByUserID_Call struct {
	*mock.Call
}

// ListByUserID is a helper method to define mock.On call
//   - userID string
func (_e *VideoRepositoryInterfaceMock_Expecter) ListByUserID(userID interface{}) *VideoRepositoryInterfaceMock_ListByUserID_Call {
	return &VideoRepositoryInterfaceMock_ListByUserID_Call{Call: _e.mock.On("ListByUserID", userID)}
}

func (_c *VideoRepositoryInterfaceMock_ListByUserID_Call) Run(run func(userID string)) *VideoRepositoryInterfaceMock_ListByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *VideoRepositoryInterfaceMock_ListByUserID_Call) Return(_a0 []*entities.Video, _a1 error) *VideoRepositoryInterfaceMock_ListByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VideoRepositoryInterfaceMock_ListByUserID_Call) RunAndReturn(run func(string) ([]*entities.Video, error)) *VideoRepositoryInterfaceMock_ListByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: video
func (_m *VideoRepositoryInterfaceMock) Update(video *entities.Video) error {
	ret := _m.Called(video)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Video) error); ok {
		r0 = rf(video)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VideoRepositoryInterfaceMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type VideoRepositoryInterfaceMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - video *entities.Video
func (_e *VideoRepositoryInterfaceMock_Expecter) Update(video interface{}) *VideoRepositoryInterfaceMock_Update_Call {
	return &VideoRepositoryInterfaceMock_Update_Call{Call: _e.mock.On("Update", video)}
}

func (_c *VideoRepositoryInterfaceMock_Update_Call) Run(run func(video *entities.Video)) *VideoRepositoryInterfaceMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Video))
	})
	return _c
}

func (_c *VideoRepositoryInterfaceMock_Update_Call) Return(_a0 error) *VideoRepositoryInterfaceMock_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VideoRepositoryInterfaceMock_Update_Call) RunAndReturn(run func(*entities.Video) error) *VideoRepositoryInterfaceMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewVideoRepositoryInterfaceMock creates a new instance of VideoRepositoryInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVideoRepositoryInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *VideoRepositoryInterfaceMock {
	mock := &VideoRepositoryInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
