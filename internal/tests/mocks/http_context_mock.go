// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"
)

// HTTPContextMock is an autogenerated mock type for the HTTPContext type
type HTTPContextMock struct {
	mock.Mock
}

type HTTPContextMock_Expecter struct {
	mock *mock.Mock
}

func (_m *HTTPContextMock) EXPECT() *HTTPContextMock_Expecter {
	return &HTTPContextMock_Expecter{mock: &_m.Mock}
}

// BindJSON provides a mock function with given fields: obj
func (_m *HTTPContextMock) BindJSON(obj interface{}) error {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for BindJSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HTTPContextMock_BindJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BindJSON'
type HTTPContextMock_BindJSON_Call struct {
	*mock.Call
}

// BindJSON is a helper method to define mock.On call
//   - obj interface{}
func (_e *HTTPContextMock_Expecter) BindJSON(obj interface{}) *HTTPContextMock_BindJSON_Call {
	return &HTTPContextMock_BindJSON_Call{Call: _e.mock.On("BindJSON", obj)}
}

func (_c *HTTPContextMock_BindJSON_Call) Run(run func(obj interface{})) *HTTPContextMock_BindJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *HTTPContextMock_BindJSON_Call) Return(_a0 error) *HTTPContextMock_BindJSON_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HTTPContextMock_BindJSON_Call) RunAndReturn(run func(interface{}) error) *HTTPContextMock_BindJSON_Call {
	_c.Call.Return(run)
	return _c
}

// Data provides a mock function with given fields: code, contentType, data
func (_m *HTTPContextMock) Data(code int, contentType string, data []byte) {
	_m.Called(code, contentType, data)
}

// HTTPContextMock_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type HTTPContextMock_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
//   - code int
//   - contentType string
//   - data []byte
func (_e *HTTPContextMock_Expecter) Data(code interface{}, contentType interface{}, data interface{}) *HTTPContextMock_Data_Call {
	return &HTTPContextMock_Data_Call{Call: _e.mock.On("Data", code, contentType, data)}
}

func (_c *HTTPContextMock_Data_Call) Run(run func(code int, contentType string, data []byte)) *HTTPContextMock_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *HTTPContextMock_Data_Call) Return() *HTTPContextMock_Data_Call {
	_c.Call.Return()
	return _c
}

func (_c *HTTPContextMock_Data_Call) RunAndReturn(run func(int, string, []byte)) *HTTPContextMock_Data_Call {
	_c.Run(run)
	return _c
}

// DefaultQuery provides a mock function with given fields: key, defaultValue
func (_m *HTTPContextMock) DefaultQuery(key string, defaultValue string) string {
	ret := _m.Called(key, defaultValue)

	if len(ret) == 0 {
		panic("no return value specified for DefaultQuery")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(key, defaultValue)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HTTPContextMock_DefaultQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DefaultQuery'
type HTTPContextMock_DefaultQuery_Call struct {
	*mock.Call
}

// DefaultQuery is a helper method to define mock.On call
//   - key string
//   - defaultValue string
func (_e *HTTPContextMock_Expecter) DefaultQuery(key interface{}, defaultValue interface{}) *HTTPContextMock_DefaultQuery_Call {
	return &HTTPContextMock_DefaultQuery_Call{Call: _e.mock.On("DefaultQuery", key, defaultValue)}
}

func (_c *HTTPContextMock_DefaultQuery_Call) Run(run func(key string, defaultValue string)) *HTTPContextMock_DefaultQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *HTTPContextMock_DefaultQuery_Call) Return(_a0 string) *HTTPContextMock_DefaultQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HTTPContextMock_DefaultQuery_Call) RunAndReturn(run func(string, string) string) *HTTPContextMock_DefaultQuery_Call {
	_c.Call.Return(run)
	return _c
}

// GetHeader provides a mock function with given fields: key
func (_m *HTTPContextMock) GetHeader(key string) string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetHeader")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HTTPContextMock_GetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeader'
type HTTPContextMock_GetHeader_Call struct {
	*mock.Call
}

// GetHeader is a helper method to define mock.On call
//   - key string
func (_e *HTTPContextMock_Expecter) GetHeader(key interface{}) *HTTPContextMock_GetHeader_Call {
	return &HTTPContextMock_GetHeader_Call{Call: _e.mock.On("GetHeader", key)}
}

func (_c *HTTPContextMock_GetHeader_Call) Run(run func(key string)) *HTTPContextMock_GetHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *HTTPContextMock_GetHeader_Call) Return(_a0 string) *HTTPContextMock_GetHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HTTPContextMock_GetHeader_Call) RunAndReturn(run func(string) string) *HTTPContextMock_GetHeader_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with given fields: key, value
func (_m *HTTPContextMock) Header(key string, value string) {
	_m.Called(key, value)
}

// HTTPContextMock_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type HTTPContextMock_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *HTTPContextMock_Expecter) Header(key interface{}, value interface{}) *HTTPContextMock_Header_Call {
	return &HTTPContextMock_Header_Call{Call: _e.mock.On("Header", key, value)}
}

func (_c *HTTPContextMock_Header_Call) Run(run func(key string, value string)) *HTTPContextMock_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *HTTPContextMock_Header_Call) Return() *HTTPContextMock_Header_Call {
	_c.Call.Return()
	return _c
}

func (_c *HTTPContextMock_Header_Call) RunAndReturn(run func(string, string)) *HTTPContextMock_Header_Call {
	_c.Run(run)
	return _c
}

// JSON provides a mock function with given fields: code, obj
func (_m *HTTPContextMock) JSON(code int, obj interface{}) {
	_m.Called(code, obj)
}

// HTTPContextMock_JSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSON'
type HTTPContextMock_JSON_Call struct {
	*mock.Call
}

// JSON is a helper method to define mock.On call
//   - code int
//   - obj interface{}
func (_e *HTTPContextMock_Expecter) JSON(code interface{}, obj interface{}) *HTTPContextMock_JSON_Call {
	return &HTTPContextMock_JSON_Call{Call: _e.mock.On("JSON", code, obj)}
}

func (_c *HTTPContextMock_JSON_Call) Run(run func(code int, obj interface{})) *HTTPContextMock_JSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(interface{}))
	})
	return _c
}

func (_c *HTTPContextMock_JSON_Call) Return() *HTTPContextMock_JSON_Call {
	_c.Call.Return()
	return _c
}

func (_c *HTTPContextMock_JSON_Call) RunAndReturn(run func(int, interface{})) *HTTPContextMock_JSON_Call {
	_c.Run(run)
	return _c
}

// MultipartForm provides a mock function with no fields
func (_m *HTTPContextMock) MultipartForm() (*multipart.Form, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MultipartForm")
	}

	var r0 *multipart.Form
	var r1 error
	if rf, ok := ret.Get(0).(func() (*multipart.Form, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *multipart.Form); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*multipart.Form)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HTTPContextMock_MultipartForm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultipartForm'
type HTTPContextMock_MultipartForm_Call struct {
	*mock.Call
}

// MultipartForm is a helper method to define mock.On call
func (_e *HTTPContextMock_Expecter) MultipartForm() *HTTPContextMock_MultipartForm_Call {
	return &HTTPContextMock_MultipartForm_Call{Call: _e.mock.On("MultipartForm")}
}

func (_c *HTTPContextMock_MultipartForm_Call) Run(run func()) *HTTPContextMock_MultipartForm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HTTPContextMock_MultipartForm_Call) Return(_a0 *multipart.Form, _a1 error) *HTTPContextMock_MultipartForm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HTTPContextMock_MultipartForm_Call) RunAndReturn(run func() (*multipart.Form, error)) *HTTPContextMock_MultipartForm_Call {
	_c.Call.Return(run)
	return _c
}

// Param provides a mock function with given fields: key
func (_m *HTTPContextMock) Param(key string) string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Param")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HTTPContextMock_Param_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Param'
type HTTPContextMock_Param_Call struct {
	*mock.Call
}

// Param is a helper method to define mock.On call
//   - key string
func (_e *HTTPContextMock_Expecter) Param(key interface{}) *HTTPContextMock_Param_Call {
	return &HTTPContextMock_Param_Call{Call: _e.mock.On("Param", key)}
}

func (_c *HTTPContextMock_Param_Call) Run(run func(key string)) *HTTPContextMock_Param_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *HTTPContextMock_Param_Call) Return(_a0 string) *HTTPContextMock_Param_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HTTPContextMock_Param_Call) RunAndReturn(run func(string) string) *HTTPContextMock_Param_Call {
	_c.Call.Return(run)
	return _c
}

// NewHTTPContextMock creates a new instance of HTTPContextMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHTTPContextMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *HTTPContextMock {
	mock := &HTTPContextMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
