// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	httpserver "tech-challenge-hackaton/internal/infra/http"

	mock "github.com/stretchr/testify/mock"
)

// HTTPRoutesMock is an autogenerated mock type for the HTTPRoutes type
type HTTPRoutesMock struct {
	mock.Mock
}

type HTTPRoutesMock_Expecter struct {
	mock *mock.Mock
}

func (_m *HTTPRoutesMock) EXPECT() *HTTPRoutesMock_Expecter {
	return &HTTPRoutesMock_Expecter{mock: &_m.Mock}
}

// DELETE provides a mock function with given fields: _a0, _a1
func (_m *HTTPRoutesMock) DELETE(_a0 string, _a1 ...httpserver.HTTPHandlerFunc) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// HTTPRoutesMock_DELETE_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DELETE'
type HTTPRoutesMock_DELETE_Call struct {
	*mock.Call
}

// DELETE is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...httpserver.HTTPHandlerFunc
func (_e *HTTPRoutesMock_Expecter) DELETE(_a0 interface{}, _a1 ...interface{}) *HTTPRoutesMock_DELETE_Call {
	return &HTTPRoutesMock_DELETE_Call{Call: _e.mock.On("DELETE",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *HTTPRoutesMock_DELETE_Call) Run(run func(_a0 string, _a1 ...httpserver.HTTPHandlerFunc)) *HTTPRoutesMock_DELETE_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]httpserver.HTTPHandlerFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(httpserver.HTTPHandlerFunc)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *HTTPRoutesMock_DELETE_Call) Return() *HTTPRoutesMock_DELETE_Call {
	_c.Call.Return()
	return _c
}

func (_c *HTTPRoutesMock_DELETE_Call) RunAndReturn(run func(string, ...httpserver.HTTPHandlerFunc)) *HTTPRoutesMock_DELETE_Call {
	_c.Run(run)
	return _c
}

// GET provides a mock function with given fields: _a0, _a1
func (_m *HTTPRoutesMock) GET(_a0 string, _a1 ...httpserver.HTTPHandlerFunc) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// HTTPRoutesMock_GET_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GET'
type HTTPRoutesMock_GET_Call struct {
	*mock.Call
}

// GET is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...httpserver.HTTPHandlerFunc
func (_e *HTTPRoutesMock_Expecter) GET(_a0 interface{}, _a1 ...interface{}) *HTTPRoutesMock_GET_Call {
	return &HTTPRoutesMock_GET_Call{Call: _e.mock.On("GET",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *HTTPRoutesMock_GET_Call) Run(run func(_a0 string, _a1 ...httpserver.HTTPHandlerFunc)) *HTTPRoutesMock_GET_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]httpserver.HTTPHandlerFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(httpserver.HTTPHandlerFunc)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *HTTPRoutesMock_GET_Call) Return() *HTTPRoutesMock_GET_Call {
	_c.Call.Return()
	return _c
}

func (_c *HTTPRoutesMock_GET_Call) RunAndReturn(run func(string, ...httpserver.HTTPHandlerFunc)) *HTTPRoutesMock_GET_Call {
	_c.Run(run)
	return _c
}

// PATCH provides a mock function with given fields: _a0, _a1
func (_m *HTTPRoutesMock) PATCH(_a0 string, _a1 ...httpserver.HTTPHandlerFunc) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// HTTPRoutesMock_PATCH_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PATCH'
type HTTPRoutesMock_PATCH_Call struct {
	*mock.Call
}

// PATCH is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...httpserver.HTTPHandlerFunc
func (_e *HTTPRoutesMock_Expecter) PATCH(_a0 interface{}, _a1 ...interface{}) *HTTPRoutesMock_PATCH_Call {
	return &HTTPRoutesMock_PATCH_Call{Call: _e.mock.On("PATCH",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *HTTPRoutesMock_PATCH_Call) Run(run func(_a0 string, _a1 ...httpserver.HTTPHandlerFunc)) *HTTPRoutesMock_PATCH_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]httpserver.HTTPHandlerFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(httpserver.HTTPHandlerFunc)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *HTTPRoutesMock_PATCH_Call) Return() *HTTPRoutesMock_PATCH_Call {
	_c.Call.Return()
	return _c
}

func (_c *HTTPRoutesMock_PATCH_Call) RunAndReturn(run func(string, ...httpserver.HTTPHandlerFunc)) *HTTPRoutesMock_PATCH_Call {
	_c.Run(run)
	return _c
}

// POST provides a mock function with given fields: _a0, _a1
func (_m *HTTPRoutesMock) POST(_a0 string, _a1 ...httpserver.HTTPHandlerFunc) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// HTTPRoutesMock_POST_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'POST'
type HTTPRoutesMock_POST_Call struct {
	*mock.Call
}

// POST is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...httpserver.HTTPHandlerFunc
func (_e *HTTPRoutesMock_Expecter) POST(_a0 interface{}, _a1 ...interface{}) *HTTPRoutesMock_POST_Call {
	return &HTTPRoutesMock_POST_Call{Call: _e.mock.On("POST",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *HTTPRoutesMock_POST_Call) Run(run func(_a0 string, _a1 ...httpserver.HTTPHandlerFunc)) *HTTPRoutesMock_POST_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]httpserver.HTTPHandlerFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(httpserver.HTTPHandlerFunc)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *HTTPRoutesMock_POST_Call) Return() *HTTPRoutesMock_POST_Call {
	_c.Call.Return()
	return _c
}

func (_c *HTTPRoutesMock_POST_Call) RunAndReturn(run func(string, ...httpserver.HTTPHandlerFunc)) *HTTPRoutesMock_POST_Call {
	_c.Run(run)
	return _c
}

// PUT provides a mock function with given fields: _a0, _a1
func (_m *HTTPRoutesMock) PUT(_a0 string, _a1 ...httpserver.HTTPHandlerFunc) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// HTTPRoutesMock_PUT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PUT'
type HTTPRoutesMock_PUT_Call struct {
	*mock.Call
}

// PUT is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...httpserver.HTTPHandlerFunc
func (_e *HTTPRoutesMock_Expecter) PUT(_a0 interface{}, _a1 ...interface{}) *HTTPRoutesMock_PUT_Call {
	return &HTTPRoutesMock_PUT_Call{Call: _e.mock.On("PUT",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *HTTPRoutesMock_PUT_Call) Run(run func(_a0 string, _a1 ...httpserver.HTTPHandlerFunc)) *HTTPRoutesMock_PUT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]httpserver.HTTPHandlerFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(httpserver.HTTPHandlerFunc)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *HTTPRoutesMock_PUT_Call) Return() *HTTPRoutesMock_PUT_Call {
	_c.Call.Return()
	return _c
}

func (_c *HTTPRoutesMock_PUT_Call) RunAndReturn(run func(string, ...httpserver.HTTPHandlerFunc)) *HTTPRoutesMock_PUT_Call {
	_c.Run(run)
	return _c
}

// SetBasePath provides a mock function with given fields: basePath
func (_m *HTTPRoutesMock) SetBasePath(basePath string) {
	_m.Called(basePath)
}

// HTTPRoutesMock_SetBasePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBasePath'
type HTTPRoutesMock_SetBasePath_Call struct {
	*mock.Call
}

// SetBasePath is a helper method to define mock.On call
//   - basePath string
func (_e *HTTPRoutesMock_Expecter) SetBasePath(basePath interface{}) *HTTPRoutesMock_SetBasePath_Call {
	return &HTTPRoutesMock_SetBasePath_Call{Call: _e.mock.On("SetBasePath", basePath)}
}

func (_c *HTTPRoutesMock_SetBasePath_Call) Run(run func(basePath string)) *HTTPRoutesMock_SetBasePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *HTTPRoutesMock_SetBasePath_Call) Return() *HTTPRoutesMock_SetBasePath_Call {
	_c.Call.Return()
	return _c
}

func (_c *HTTPRoutesMock_SetBasePath_Call) RunAndReturn(run func(string)) *HTTPRoutesMock_SetBasePath_Call {
	_c.Run(run)
	return _c
}

// SetSwagger provides a mock function with given fields: _a0
func (_m *HTTPRoutesMock) SetSwagger(_a0 string) {
	_m.Called(_a0)
}

// HTTPRoutesMock_SetSwagger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSwagger'
type HTTPRoutesMock_SetSwagger_Call struct {
	*mock.Call
}

// SetSwagger is a helper method to define mock.On call
//   - _a0 string
func (_e *HTTPRoutesMock_Expecter) SetSwagger(_a0 interface{}) *HTTPRoutesMock_SetSwagger_Call {
	return &HTTPRoutesMock_SetSwagger_Call{Call: _e.mock.On("SetSwagger", _a0)}
}

func (_c *HTTPRoutesMock_SetSwagger_Call) Run(run func(_a0 string)) *HTTPRoutesMock_SetSwagger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *HTTPRoutesMock_SetSwagger_Call) Return() *HTTPRoutesMock_SetSwagger_Call {
	_c.Call.Return()
	return _c
}

func (_c *HTTPRoutesMock_SetSwagger_Call) RunAndReturn(run func(string)) *HTTPRoutesMock_SetSwagger_Call {
	_c.Run(run)
	return _c
}

// NewHTTPRoutesMock creates a new instance of HTTPRoutesMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHTTPRoutesMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *HTTPRoutesMock {
	mock := &HTTPRoutesMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
