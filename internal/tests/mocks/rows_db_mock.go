// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// RowsDBMock is an autogenerated mock type for the RowsDB type
type RowsDBMock struct {
	mock.Mock
}

type RowsDBMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RowsDBMock) EXPECT() *RowsDBMock_Expecter {
	return &RowsDBMock_Expecter{mock: &_m.Mock}
}

// Next provides a mock function with no fields
func (_m *RowsDBMock) Next() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RowsDBMock_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type RowsDBMock_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *RowsDBMock_Expecter) Next() *RowsDBMock_Next_Call {
	return &RowsDBMock_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *RowsDBMock_Next_Call) Run(run func()) *RowsDBMock_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RowsDBMock_Next_Call) Return(_a0 bool) *RowsDBMock_Next_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RowsDBMock_Next_Call) RunAndReturn(run func() bool) *RowsDBMock_Next_Call {
	_c.Call.Return(run)
	return _c
}

// Scan provides a mock function with given fields: dest
func (_m *RowsDBMock) Scan(dest ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, dest...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(dest...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RowsDBMock_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type RowsDBMock_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - dest ...interface{}
func (_e *RowsDBMock_Expecter) Scan(dest ...interface{}) *RowsDBMock_Scan_Call {
	return &RowsDBMock_Scan_Call{Call: _e.mock.On("Scan",
		append([]interface{}{}, dest...)...)}
}

func (_c *RowsDBMock_Scan_Call) Run(run func(dest ...interface{})) *RowsDBMock_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *RowsDBMock_Scan_Call) Return(_a0 error) *RowsDBMock_Scan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RowsDBMock_Scan_Call) RunAndReturn(run func(...interface{}) error) *RowsDBMock_Scan_Call {
	_c.Call.Return(run)
	return _c
}

// NewRowsDBMock creates a new instance of RowsDBMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRowsDBMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RowsDBMock {
	mock := &RowsDBMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
