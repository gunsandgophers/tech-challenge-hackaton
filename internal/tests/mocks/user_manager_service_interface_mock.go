// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	services "tech-challenge-hackaton/internal/application/services"

	mock "github.com/stretchr/testify/mock"
)

// UserManagerServiceInterfaceMock is an autogenerated mock type for the UserManagerServiceInterface type
type UserManagerServiceInterfaceMock struct {
	mock.Mock
}

type UserManagerServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *UserManagerServiceInterfaceMock) EXPECT() *UserManagerServiceInterfaceMock_Expecter {
	return &UserManagerServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// GetUser provides a mock function with given fields: token
func (_m *UserManagerServiceInterfaceMock) GetUser(token *services.UserAccessToken) (*services.UserDTO, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *services.UserDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(*services.UserAccessToken) (*services.UserDTO, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(*services.UserAccessToken) *services.UserDTO); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.UserDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*services.UserAccessToken) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserManagerServiceInterfaceMock_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type UserManagerServiceInterfaceMock_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - token *services.UserAccessToken
func (_e *UserManagerServiceInterfaceMock_Expecter) GetUser(token interface{}) *UserManagerServiceInterfaceMock_GetUser_Call {
	return &UserManagerServiceInterfaceMock_GetUser_Call{Call: _e.mock.On("GetUser", token)}
}

func (_c *UserManagerServiceInterfaceMock_GetUser_Call) Run(run func(token *services.UserAccessToken)) *UserManagerServiceInterfaceMock_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*services.UserAccessToken))
	})
	return _c
}

func (_c *UserManagerServiceInterfaceMock_GetUser_Call) Return(_a0 *services.UserDTO, _a1 error) *UserManagerServiceInterfaceMock_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserManagerServiceInterfaceMock_GetUser_Call) RunAndReturn(run func(*services.UserAccessToken) (*services.UserDTO, error)) *UserManagerServiceInterfaceMock_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: username, password
func (_m *UserManagerServiceInterfaceMock) Login(username string, password string) (string, error) {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserManagerServiceInterfaceMock_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type UserManagerServiceInterfaceMock_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - username string
//   - password string
func (_e *UserManagerServiceInterfaceMock_Expecter) Login(username interface{}, password interface{}) *UserManagerServiceInterfaceMock_Login_Call {
	return &UserManagerServiceInterfaceMock_Login_Call{Call: _e.mock.On("Login", username, password)}
}

func (_c *UserManagerServiceInterfaceMock_Login_Call) Run(run func(username string, password string)) *UserManagerServiceInterfaceMock_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UserManagerServiceInterfaceMock_Login_Call) Return(_a0 string, _a1 error) *UserManagerServiceInterfaceMock_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserManagerServiceInterfaceMock_Login_Call) RunAndReturn(run func(string, string) (string, error)) *UserManagerServiceInterfaceMock_Login_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAccessTokenByAuthHeader provides a mock function with given fields: authHeader
func (_m *UserManagerServiceInterfaceMock) ValidateAccessTokenByAuthHeader(authHeader string) (*services.UserAccessToken, error) {
	ret := _m.Called(authHeader)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAccessTokenByAuthHeader")
	}

	var r0 *services.UserAccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*services.UserAccessToken, error)); ok {
		return rf(authHeader)
	}
	if rf, ok := ret.Get(0).(func(string) *services.UserAccessToken); ok {
		r0 = rf(authHeader)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.UserAccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(authHeader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserManagerServiceInterfaceMock_ValidateAccessTokenByAuthHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAccessTokenByAuthHeader'
type UserManagerServiceInterfaceMock_ValidateAccessTokenByAuthHeader_Call struct {
	*mock.Call
}

// ValidateAccessTokenByAuthHeader is a helper method to define mock.On call
//   - authHeader string
func (_e *UserManagerServiceInterfaceMock_Expecter) ValidateAccessTokenByAuthHeader(authHeader interface{}) *UserManagerServiceInterfaceMock_ValidateAccessTokenByAuthHeader_Call {
	return &UserManagerServiceInterfaceMock_ValidateAccessTokenByAuthHeader_Call{Call: _e.mock.On("ValidateAccessTokenByAuthHeader", authHeader)}
}

func (_c *UserManagerServiceInterfaceMock_ValidateAccessTokenByAuthHeader_Call) Run(run func(authHeader string)) *UserManagerServiceInterfaceMock_ValidateAccessTokenByAuthHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserManagerServiceInterfaceMock_ValidateAccessTokenByAuthHeader_Call) Return(_a0 *services.UserAccessToken, _a1 error) *UserManagerServiceInterfaceMock_ValidateAccessTokenByAuthHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserManagerServiceInterfaceMock_ValidateAccessTokenByAuthHeader_Call) RunAndReturn(run func(string) (*services.UserAccessToken, error)) *UserManagerServiceInterfaceMock_ValidateAccessTokenByAuthHeader_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserManagerServiceInterfaceMock creates a new instance of UserManagerServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserManagerServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserManagerServiceInterfaceMock {
	mock := &UserManagerServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
