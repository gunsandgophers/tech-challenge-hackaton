// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// SnapshotServiceInterfaceMock is an autogenerated mock type for the SnapshotServiceInterface type
type SnapshotServiceInterfaceMock struct {
	mock.Mock
}

type SnapshotServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *SnapshotServiceInterfaceMock) EXPECT() *SnapshotServiceInterfaceMock_Expecter {
	return &SnapshotServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// Snapshot provides a mock function with given fields: videoID, localVideoDir, filename, interval
func (_m *SnapshotServiceInterfaceMock) Snapshot(videoID string, localVideoDir string, filename string, interval int) (string, string, error) {
	ret := _m.Called(videoID, localVideoDir, filename, interval)

	if len(ret) == 0 {
		panic("no return value specified for Snapshot")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, string, int) (string, string, error)); ok {
		return rf(videoID, localVideoDir, filename, interval)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, int) string); ok {
		r0 = rf(videoID, localVideoDir, filename, interval)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, int) string); ok {
		r1 = rf(videoID, localVideoDir, filename, interval)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string, string, int) error); ok {
		r2 = rf(videoID, localVideoDir, filename, interval)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SnapshotServiceInterfaceMock_Snapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Snapshot'
type SnapshotServiceInterfaceMock_Snapshot_Call struct {
	*mock.Call
}

// Snapshot is a helper method to define mock.On call
//   - videoID string
//   - localVideoDir string
//   - filename string
//   - interval int
func (_e *SnapshotServiceInterfaceMock_Expecter) Snapshot(videoID interface{}, localVideoDir interface{}, filename interface{}, interval interface{}) *SnapshotServiceInterfaceMock_Snapshot_Call {
	return &SnapshotServiceInterfaceMock_Snapshot_Call{Call: _e.mock.On("Snapshot", videoID, localVideoDir, filename, interval)}
}

func (_c *SnapshotServiceInterfaceMock_Snapshot_Call) Run(run func(videoID string, localVideoDir string, filename string, interval int)) *SnapshotServiceInterfaceMock_Snapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *SnapshotServiceInterfaceMock_Snapshot_Call) Return(_a0 string, _a1 string, _a2 error) *SnapshotServiceInterfaceMock_Snapshot_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SnapshotServiceInterfaceMock_Snapshot_Call) RunAndReturn(run func(string, string, string, int) (string, string, error)) *SnapshotServiceInterfaceMock_Snapshot_Call {
	_c.Call.Return(run)
	return _c
}

// NewSnapshotServiceInterfaceMock creates a new instance of SnapshotServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSnapshotServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *SnapshotServiceInterfaceMock {
	mock := &SnapshotServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
