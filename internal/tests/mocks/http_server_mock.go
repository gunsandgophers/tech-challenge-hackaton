// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// HTTPServerMock is an autogenerated mock type for the HTTPServer type
type HTTPServerMock struct {
	mock.Mock
}

type HTTPServerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *HTTPServerMock) EXPECT() *HTTPServerMock_Expecter {
	return &HTTPServerMock_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: addr
func (_m *HTTPServerMock) Run(addr ...string) error {
	_va := make([]interface{}, len(addr))
	for _i := range addr {
		_va[_i] = addr[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(addr...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HTTPServerMock_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type HTTPServerMock_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - addr ...string
func (_e *HTTPServerMock_Expecter) Run(addr ...interface{}) *HTTPServerMock_Run_Call {
	return &HTTPServerMock_Run_Call{Call: _e.mock.On("Run",
		append([]interface{}{}, addr...)...)}
}

func (_c *HTTPServerMock_Run_Call) Run(run func(addr ...string)) *HTTPServerMock_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *HTTPServerMock_Run_Call) Return(_a0 error) *HTTPServerMock_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HTTPServerMock_Run_Call) RunAndReturn(run func(...string) error) *HTTPServerMock_Run_Call {
	_c.Call.Return(run)
	return _c
}

// ServeHTTP provides a mock function with given fields: w, req
func (_m *HTTPServerMock) ServeHTTP(w http.ResponseWriter, req *http.Request) {
	_m.Called(w, req)
}

// HTTPServerMock_ServeHTTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServeHTTP'
type HTTPServerMock_ServeHTTP_Call struct {
	*mock.Call
}

// ServeHTTP is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - req *http.Request
func (_e *HTTPServerMock_Expecter) ServeHTTP(w interface{}, req interface{}) *HTTPServerMock_ServeHTTP_Call {
	return &HTTPServerMock_ServeHTTP_Call{Call: _e.mock.On("ServeHTTP", w, req)}
}

func (_c *HTTPServerMock_ServeHTTP_Call) Run(run func(w http.ResponseWriter, req *http.Request)) *HTTPServerMock_ServeHTTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *HTTPServerMock_ServeHTTP_Call) Return() *HTTPServerMock_ServeHTTP_Call {
	_c.Call.Return()
	return _c
}

func (_c *HTTPServerMock_ServeHTTP_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *HTTPServerMock_ServeHTTP_Call {
	_c.Run(run)
	return _c
}

// NewHTTPServerMock creates a new instance of HTTPServerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHTTPServerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *HTTPServerMock {
	mock := &HTTPServerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
